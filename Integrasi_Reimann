import time
import numpy as np

def f(x):
    return 4 / (1 + x**2)

def riemann_sum(N):
    delta_x = 1 / N
    integral_sum = 0
    for i in range(N):
        x_i = (i + 0.5) * delta_x
        integral_sum += f(x_i) * delta_x
    return integral_sum

def true_integral_value():
    return 3.14159265358979323846  # Nilai integral sebenarnya dari f(x)

# Deklarasi komponen yang dibutuhkan
N_values = [10, 100, 1000, 10000]
errors = []
execution_times = []

for N in N_values:
    start_time = time.time()
    result = riemann_sum(N)
    end_time = time.time()
    execution_time = end_time - start_time
    execution_times.append(execution_time)
    error = abs(result - true_integral_value())
    errors.append(error)

# Menghitung galat RMS
rms_error = np.sqrt(np.mean(np.square(errors)))

# Menampilkan hasil
for i, N in enumerate(N_values):
    if (i < 2) :
        print(f"N = {N}\t\t, Hasil = {result}, Galat = {errors[i]:.5f}, Waktu Eksekusi = {execution_times[i]:.5f} detik")
    else :
        print(f"N = {N}\t, Hasil = {result}, Galat = {errors[i]:.5f}, Waktu Eksekusi = {execution_times[i]:.5f} detik")
    

print(f"\nGalat RMS: {rms_error:.5f}")
